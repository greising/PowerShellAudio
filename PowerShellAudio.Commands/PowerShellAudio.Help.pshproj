<?xml version="1.0"?>
<ModuleObject xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" fVersion="1.1" type="Binary" mclass="Module" useSupports="false">
  <Name>PowerShellAudio</Name>
  <Version>1.1.0</Version>
  <Description>An extensible, multi-format audio conversion and tagging module</Description>
  <HasManifest>true</HasManifest>
  <OverridePostCount>false</OverridePostCount>
  <FetchPostCount xsi:nil="true" />
  <Cmdlets>
    <CmdletObject verb="Copy" noun="AudioFile">
      <Name>Copy-AudioFile</Name>
      <GeneralHelp>
        <Synopsis>Copies one or more audio files to new files located on a file system drive.</Synopsis>
        <Description>The Copy-AudioFile cmdlet copies one or more audio files to a specified directory.

The new file name(s) and/or directory can be generated from metadata by specifying keys inside curly braces. For more information, type "Get-Help Copy-AudioFile -Examples".</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="ByPath" Params="Path AudioFile Name Replace Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
        <CommandParameterSetInfo2 Name="ByLiteralPath" Params="LiteralPath AudioFile Name Replace Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
      </ParamSets>
      <Syntax>
        <string>Copy-AudioFile [-Path] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-Name &lt;String&gt;] [-Replace] [-WhatIf] [-Confirm]</string>
        <string>Copy-AudioFile [-LiteralPath] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-Name &lt;String&gt;] [-Replace] [-WhatIf] [-Confirm]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file to be copied.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Name</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The new file name, without extension.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Replace</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>If specified and the destination file already exists, it will be replaced. If not specified and the destination file already exists, an exception will be thrown.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>WhatIf</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>wi</string>
          </Aliases>
          <Description>Shows what would happen if the cmdlet runs. The cmdlet is not run.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Confirm</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>cf</string>
          </Aliases>
          <Description>Prompts you for confirmation before running the cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Path</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies a path to the output directory. Wildcards are permitted. The default location is the current directory (.).</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>LiteralPath</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.AliasAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
          </Aliases>
          <Description>Specifies a path to the output directory. Unlike the Path parameter, the value of the LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.wav | Copy-AudioFile C:\Output</Cmd>
          <Description>This command copies song.wav from the current directory to C:\Output\song.wav</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.wav | Copy-AudioFile C:\Output -Name copiedsong</Cmd>
          <Description>This command copies song.wav from the current directory to C:\Output\copiedsong.wav</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile *.flac | Copy-AudioFile "C:\Output\{Artist}\{Album}" -Name "{TrackNumber} - {Title}"</Cmd>
          <Description>This command copies all the .flac files in the current directory to a new directory structure under C:\Output, using metadata to construct the directory structure and file names.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 4</Name>
          <Cmd>Get-ChildItem C:\Users\Myself\Music -Filter *.flac -Recurse | Get-AudioFile | Copy-AudioFile "C:\Output\{Artist}\{Album}" -Name "{TrackNumber} - {Title}"</Cmd>
          <Description>This command copies all the .flac files found anywhere under the Myself user's Music directory to a new directory structure under C:\Output, using metadata to construct the directory structure and file names.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioFile">
      <Name>Get-AudioFile</Name>
      <GeneralHelp>
        <Synopsis>Gets one or more audio files located on a file system drive.</Synopsis>
        <Description>The Get-AudioFile cmdlet gets one or more audio files in a specified directory. Relative paths and wildcards are supported.

For more complex operations, such as recursively searching through a directory tree, you can use Get-ChildItem and then pipe the results into Get-AudioFile.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="ByPath" Params="Path Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
        <CommandParameterSetInfo2 Name="ByLiteralPath" Params="LiteralPath Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
        <CommandParameterSetInfo2 Name="ByFileInfo" Params="FileInfo Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioFile [-Path] &lt;String&gt;</string>
        <string>Get-AudioFile [-LiteralPath] &lt;String&gt;</string>
        <string>Get-AudioFile [-FileInfo] &lt;FileInfo&gt;</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Path</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies a path to one or more files. Wildcards are permitted. The default location is the current directory (.).</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="FileInfo" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>FileInfo</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies one or more files.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>LiteralPath</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
          </Aliases>
          <Description>Specifies a path to one or more files. Unlike the Path parameter, the value of the LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.wav</Cmd>
          <Description>This command gets an audio file named song.wav in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile *.wav</Cmd>
          <Description>This command gets all audio files with a .wav extension in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile C:\Users\Myself\Music\*.wav</Cmd>
          <Description>This command gets all audio files with a .wav extension in the Myself user's Music directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 4</Name>
          <Cmd>Get-ChildItem C:\Users\Myself\Music -Filter *.wav -Recurse | Get-AudioFile</Cmd>
          <Description>This command recursively gets all audio files with a .wav extension in the Myself user's Music directory and all subfolders.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioInfo">
      <Name>Get-AudioInfo</Name>
      <GeneralHelp>
        <Synopsis>Gets the audio information describing one or more audio files.</Synopsis>
        <Description>The Get-AudioInfo cmdlet simply returns the AudioInfo property for one or more audio files.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="AudioFile Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioInfo [-AudioFile] &lt;AudioFile&gt;</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.wav | Get-AudioInfo</Cmd>
          <Description>This command gets the audio information for an audio file named song.wav in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile *.wav | Get-AudioInfo</Cmd>
          <Description>This command gets the audio information for all audio files with the .wav extension in the current directory.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Measure" noun="AudioFile">
      <Name>Measure-AudioFile</Name>
      <GeneralHelp>
        <Synopsis>Applies an analysis algorithm to one or more audio files.</Synopsis>
        <Description>The Measure-AudioFile cmdlet generates metadata about one or more audio files by examining the audio streams with the specified analyzer. Passing multiple audio files to a single cmdlet instance will treat them as a single album, or grouping. This cmdlet will never modify the audio itself.

To get a list of available analyzers, use the Get-AudioAnalyzerInfo cmdlet.

The results can be retrieved with the Get-AudioFileMetadata cmdlet, or by accessing the Metadata property directly. To persist the results to disk, use the Save-AudioFileMetadata cmdlet.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Analyzer AudioFile PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Measure-AudioFile [-Analyzer] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-PassThru]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Analyzer</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The name of the analyzer to use. To get a list of available analyzers, use the Get-AudioAnalyzerInfo cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file to be measured.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the modified audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.wav | Measure-AudioFile "ReplayGain 2.0"</Cmd>
          <Description>This command applies ReplayGain 2.0 analysis to song.wav in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.wav | Measure-AudioFile "ReplayGain 2.0" -PassThru | Get-AudioFileMetadata TrackPeak</Cmd>
          <Description>This command applies ReplayGain 2.0 analysis to song.wav in the current directory, then returns the measured TrackPeak value.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile song.wav | Measure-AudioFile "ReplayGain 2.0" -PassThru | Save-AudioFileMetadata</Cmd>
          <Description>This command applies ReplayGain 2.0 analysis to song.wav in the current directory, then persists the results to disk.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 4</Name>
          <Cmd>Get-AudioFile *.flac | Measure-AudioFile "ReplayGain 2.0"</Cmd>
          <Description>This command applies ReplayGain 2.0 analysis to all audio files with a *.flac extension in the current directory. The files are treated as a single album.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 5</Name>
          <Cmd>Get-ChildItem C:\Users\Myself\Music -Directory -Recurse | % { $_ | Get-ChildItem -File -Filter *.flac | Measure-AudioFile "ReplayGain 2.0" -PassThru | Save-AudioFileMetadata }</Cmd>
          <Description>This command applies ReplayGain 2.0 analysis to all audio files with a *.flac extension found anywhere under the Myself user's Music directory. Each directory is processed as a separate album. Finally, the results are persisted to disk.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Rename" noun="AudioFile">
      <Name>Rename-AudioFile</Name>
      <GeneralHelp>
        <Synopsis>Renames one or more audio files on a file system drive.</Synopsis>
        <Description>The Rename-AudioFile cmdlet copies one or more audio files to a specified directory.

The new file name(s) can be generated from metadata by specifying keys inside curly braces. For more information, type "Get-Help Rename-AudioFile -Examples".</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Name AudioFile PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
      </ParamSets>
      <Syntax>
        <string>Rename-AudioFile [-Name] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-PassThru] [-WhatIf] [-Confirm]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Name</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The new file name, without extension.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file to be renamed.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the renamed audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>WhatIf</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>wi</string>
          </Aliases>
          <Description>Shows what would happen if the cmdlet runs. The cmdlet is not run.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Confirm</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>cf</string>
          </Aliases>
          <Description>Prompts you for confirmation before running the cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.wav | Rename-AudioFile renamed</Cmd>
          <Description>This command renames song.wav in the current directory to renamed.wav.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.flac | Rename-AudioFile "{TrackNumber} - {Title}"</Cmd>
          <Description>This command renames song.wav in the current directory to a new name based on the TrackNumber and Title metadata values.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Export" noun="AudioFile">
      <Name>Export-AudioFile</Name>
      <GeneralHelp>
        <Synopsis>Encodes one or more audio files to new files located on a file system drive.</Synopsis>
        <Description>The Export-AudioFile cmdlet encodes one or more audio files using the specified encoder, and saves the resulting files in a specified directory.

To get a list of available encoders, use the Get-AudioEncoderInfo cmdlet.

The resulting file name(s) and/or directory can be generated from metadata by specifying keys inside curly braces. For more information, type "Get-Help Export-AudioFile -Examples".</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="ByPath" Params="Encoder Path AudioFile Name Setting Replace Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
        <CommandParameterSetInfo2 Name="ByLiteralPath" Params="Encoder LiteralPath AudioFile Name Setting Replace Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
      </ParamSets>
      <Syntax>
        <string>Export-AudioFile [-Encoder] &lt;String&gt; [-Path] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-Name &lt;String&gt;] [-Setting &lt;Hashtable&gt;] [-Replace] [-WhatIf] [-Confirm]</string>
        <string>Export-AudioFile [-Encoder] &lt;String&gt; [-LiteralPath] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-Name &lt;String&gt;] [-Setting &lt;Hashtable&gt;] [-Replace] [-WhatIf] [-Confirm]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Encoder</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The name of the encoder to use. To get a list of available encoders, use the Get-AudioEncoderInfo cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="2" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file to be exported.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="Hashtable" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Setting</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Encoder-specific settings to apply. To see the available and default settings for an encoder, use the Get-AudioEncoderInfo cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Name</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The new file name, without extension.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Replace</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>If specified and the destination file already exists, it will be replaced. If not specified and the destination file already exists, an exception will be thrown.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>WhatIf</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>wi</string>
          </Aliases>
          <Description>Shows what would happen if the cmdlet runs. The cmdlet is not run.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Confirm</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>cf</string>
          </Aliases>
          <Description>Prompts you for confirmation before running the cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>Path</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies a path to the output directory. Wildcards are permitted. The default location is the current directory (.).</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>LiteralPath</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.AliasAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
          </Aliases>
          <Description>Specifies a path to the output directory. Unlike the Path parameter, the value of the LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.wav | Export-AudioFile FLAC</Cmd>
          <Description>This command exports song.wav in the current directory to a new FLAC file with the same name, using default settings.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.wav | Export-AudioFile Wave -Replace</Cmd>
          <Description>This command exports song.wav in the current directory to a new Wave file, replacing the original.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile song.wav | Export-AudioFile FLAC -Setting @{CompressionLevel = 8}</Cmd>
          <Description>This command exports song.wav in the current directory to a new FLAC file with the same name, using compression level 8.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 4</Name>
          <Cmd>Get-AudioFile *.flac | Export-AudioFile "Lame MP3" "C:\Output\{Artist}\{Album}" -Name "{TrackNumber} - {Title}"</Cmd>
          <Description>This command exports all the .flac files in the current directory to MP3 files under C:\Output, using metadata to construct the directory structure as well as the file names.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioEncoderInfo">
      <Name>Get-AudioEncoderInfo</Name>
      <GeneralHelp>
        <Synopsis>Gets detailed information about the available encoders.</Synopsis>
        <Description>The Get-AudioEncoderInfo cmdlet provides detailed information about the available encoders currently loaded by PowerShell Audio.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Name Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioEncoderInfo [[-Name] &lt;String&gt;]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Name</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The name of the encoder. If not specified, all available encoders are returned.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples />
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioMetadataEncoderInfo">
      <Name>Get-AudioMetadataEncoderInfo</Name>
      <GeneralHelp>
        <Synopsis>Gets detailed information about the available metadata encoders.</Synopsis>
        <Description>The Get-AudioMetadataEncoderInfo cmdlet provides detailed information about the available metadata encoders currently loaded by PowerShell Audio.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Extension Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioMetadataEncoderInfo [[-Extension] &lt;String&gt;]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Extension</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file extension. If not specified, all available metadata encoders are returned.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples />
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioAnalyzerInfo">
      <Name>Get-AudioAnalyzerInfo</Name>
      <GeneralHelp>
        <Synopsis>Gets detailed information about the available analyzers.</Synopsis>
        <Description>The Get-AudioAnalyzerInfo cmdlet provides detailed information about the available analyzers currently loaded by PowerShell Audio.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Name Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioAnalyzerInfo [[-Name] &lt;String&gt;]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Name</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The name of the analyzer. If not specified, all available analyzers are returned.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples />
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Export" noun="AudioCoverArt">
      <Name>Export-AudioCoverArt</Name>
      <GeneralHelp>
        <Synopsis>Saves CoverArt objects as image files.</Synopsis>
        <Description>The Export-AudioCoverArt cmdlet saves one or more cover art objects as image (JPEG or PNG) files.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="ByPath" Params="Name Path CoverArt Replace PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
        <CommandParameterSetInfo2 Name="ByLiteralPath" Params="Name LiteralPath CoverArt Replace PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
      </ParamSets>
      <Syntax>
        <string>Export-AudioCoverArt [-Name] &lt;String&gt; [-Path] &lt;String&gt; [-CoverArt] &lt;CoverArt&gt; [-Replace] [-PassThru] [-WhatIf] [-Confirm]</string>
        <string>Export-AudioCoverArt [-Name] &lt;String&gt; [-LiteralPath] &lt;String&gt; [-CoverArt] &lt;CoverArt&gt; [-Replace] [-PassThru] [-WhatIf] [-Confirm]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Name</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The new file name, without extension.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Replace</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>If specified and the destination file already exists, it will be replaced. If not specified and the destination file already exists, an exception will be thrown.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>WhatIf</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>wi</string>
          </Aliases>
          <Description>Shows what would happen if the cmdlet runs. The cmdlet is not run.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Confirm</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>cf</string>
          </Aliases>
          <Description>Prompts you for confirmation before running the cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>Path</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies a path to the output directory. Wildcards are permitted. The default location is the current directory (.).</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="CoverArt" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="2" globbing="false">
          <Name>CoverArt</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The cover art to be exported.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the cover art to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>LiteralPath</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.AliasAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
          </Aliases>
          <Description>Specifies a path to the output directory. Unlike the Path parameter, the value of the LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Get-AudioFileCoverArt | Export-AudioCoverArt "Cover"</Cmd>
          <Description>This command exports the cover art for song.wav in the current directory to a new file named Cover.jpg or Cover.png (depending on the image format).</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioCoverArt">
      <Name>Get-AudioCoverArt</Name>
      <GeneralHelp>
        <Synopsis>Gets one or more cover art files located on a file system drive.</Synopsis>
        <Description>The Get-AudioCoverArt cmdlet gets one or more cover art files in a specified directory. Relative paths and wildcards are supported.

For more complex operations, such as recursively searching through a directory tree, you can use Get-ChildItem and then pipe the results into Get-AudioCoverArt.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="ByPath" Params="Path Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
        <CommandParameterSetInfo2 Name="ByLiteralPath" Params="LiteralPath Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
        <CommandParameterSetInfo2 Name="ByFileInfo" Params="FileInfo Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioCoverArt [-Path] &lt;String&gt;</string>
        <string>Get-AudioCoverArt [-LiteralPath] &lt;String&gt;</string>
        <string>Get-AudioCoverArt [-FileInfo] &lt;FileInfo&gt;</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Path</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies a path to one or more files. Wildcards are permitted. The default location is the current directory (.).</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="FileInfo" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>FileInfo</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies one or more files.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>LiteralPath</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.AliasAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
          </Aliases>
          <Description>Specifies a path to one or more files. Unlike the Path parameter, the value of the LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioCoverArt Folder.jpg</Cmd>
          <Description>This command gets a cover art object from a file named Folder.jpg in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioCoverArt *.jpg</Cmd>
          <Description>This command gets the cover art for all audio files with the .jpg extension in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile C:\Users\Myself\Music\*.jpg</Cmd>
          <Description>This command gets the cover art for all audio files with the .jpg extension in the Myself user's Music directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 4</Name>
          <Cmd>Get-ChildItem C:\Users\Myself\Music -Filter *.jpg -Recurse | Get-AudioCoverArt</Cmd>
          <Description>This command recursively gets all cover art files with a .jpg extension in the Myself user's Music directory and all subfolders.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Clear" noun="AudioFileMetadata">
      <Name>Clear-AudioFileMetadata</Name>
      <GeneralHelp>
        <Synopsis>Clears the metadata on one or more audio files.</Synopsis>
        <Description>The Clear-AudioFileMetadata cmdlet clears metadata on one or more audio files. You can limit what is cleared by specifying one or more keys.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Key AudioFile PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Clear-AudioFileMetadata [[-Key] &lt;String[]&gt;] [-AudioFile] &lt;AudioFile&gt; [-PassThru]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String[]" varLen="true" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Key</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The name(s) of the metadata item(s) to be cleared. If not specified, all items are cleared.

To clear the cover art, specify "CoverArt".</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file that has the metadata to be cleared.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the modified audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Clear-AudioFileMetadata</Cmd>
          <Description>This command clears the metadata on song.flac.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.flac | Clear-AudioFileMetadata -PassThru | Save-AudioFileMetadata</Cmd>
          <Description>This command clears the metadata on song.flac and then persists the change to disk.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile song.flac | Clear-AudioFileMetadata -Key Genre,CoverArt</Cmd>
          <Description>This command clears Genre and CoverArt metadata from song.flac.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Convert" noun="AudioCoverArt">
      <Name>Convert-AudioCoverArt</Name>
      <GeneralHelp>
        <Synopsis>Converts cover art to a different image size and/or format.</Synopsis>
        <Description>The Convert-AudioCoverArt cmdlet converts an existing CoverArt object into a image format. This can be used to limit image sizes on disk.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="CoverArt MaxWidth ConvertToLossy Quality Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Convert-AudioCoverArt [-CoverArt] &lt;CoverArt&gt; [-MaxWidth &lt;Int32&gt;] [-ConvertToLossy] [-Quality &lt;Int32&gt;]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="CoverArt" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>CoverArt</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The cover art to be converted.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="Int32" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>MaxWidth</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The maximum width, in pixels. If an image is wider than the specified value, it will be scaled to match the indicated value.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>ConvertToLossy</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>If specified, and the image is currently lossless (PNG format), it will be converted to lossy (JPEG). This usually results in significant space savings.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="Int32" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Quality</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specified the quality level, if the image is being converted to lossy (JPEG) format. The valid range is 0 to 100.</Description>
          <DefaultValue>75</DefaultValue>
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioCoverArt Folder.jpg | Convert-AudioCoverArt -MaxWidth 600</Cmd>
          <Description>This command converts Folder.jpg into a new image, resized (if necessary) to not exceed 600 pixels in width.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioCoverArt Folder.jpg | Convert-AudioCoverArt -ConvertToLossy</Cmd>
          <Description>This command converts Folder.jpg into a new image, re-encoding it as a lossy JPEG image if it isn't already.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Convert" noun="AudioFileCoverArt">
      <Name>Convert-AudioFileCoverArt</Name>
      <GeneralHelp>
        <Synopsis>Converts an audio file's cover art to a different image size and/or format.</Synopsis>
        <Description>The Convert-AudioFileCoverArt cmdlet converts an audio file's CoverArt metadata into a new image format. This can be used to limit image sizes on disk.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="AudioFile MaxWidth ConvertToLossy Quality PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Convert-AudioFileCoverArt [-AudioFile] &lt;AudioFile&gt; [-MaxWidth &lt;Int32&gt;] [-ConvertToLossy] [-Quality &lt;Int32&gt;] [-PassThru]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file that has the cover art to be converted.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="Int32" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>MaxWidth</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The maximum width, in pixels. If an image is wider than the specified value, it will be scaled to match the indicated value.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>ConvertToLossy</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>If specified, and the image is currently lossless (PNG format), it will be converted to lossy (JPEG). This usually results in significant space savings.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="Int32" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Quality</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specified the quality level, if the image is being converted to lossy (JPEG) format. The valid range is 0 to 100.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the modified audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Convert-AudioFileCoverArt -MaxWidth 600</Cmd>
          <Description>This command converts the cover art metadata on song.flac into a new image, resized (if necessary) to not exceed 600 pixels in width.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.flac | Convert-AudioFileCoverArt -ConvertToLossy</Cmd>
          <Description>This command converts the cover art metadata on song.flac into a new image, re-encoding it as a lossy JPEG image if it isn't already.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile song.flac | Convert-AudioFileCoverArt -ConvertToLossy -PassThru | Save-AudioFileMetadata</Cmd>
          <Description>This command converts the cover art metadata on song.flac into a new image, re-encodes it as a lossy JPEG image if it isn't already, and then persists the change to disk.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Export" noun="AudioFileCoverArt">
      <Name>Export-AudioFileCoverArt</Name>
      <GeneralHelp>
        <Synopsis>Saves the cover art for one or more audio files as image files.</Synopsis>
        <Description>The Export-AudioFileCoverArt cmdlet saves the cover art for one or more audio files as JPEG or PNG files.

The resulting file name(s) and/or directory can be generated from metadata by specifying keys inside curly braces. For more information, type "Get-Help Export-AudioFile -Examples".</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="ByPath" Params="Name Path AudioFile Replace PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
        <CommandParameterSetInfo2 Name="ByLiteralPath" Params="Name LiteralPath AudioFile Replace PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
      </ParamSets>
      <Syntax>
        <string>Export-AudioFileCoverArt [-Name] &lt;String&gt; [-Path] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-Replace] [-PassThru] [-WhatIf] [-Confirm]</string>
        <string>Export-AudioFileCoverArt [-Name] &lt;String&gt; [-LiteralPath] &lt;String&gt; [-AudioFile] &lt;AudioFile&gt; [-Replace] [-PassThru] [-WhatIf] [-Confirm]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Name</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The new file name, without extension.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>Path</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Specifies a path to the output directory. Wildcards are permitted. The default location is the current directory (.).</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="2" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file that has the cover art to be exported.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Replace</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>If specified and the destination file already exists, it will be replaced. If not specified and the destination file already exists, an exception will be thrown.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>WhatIf</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>wi</string>
          </Aliases>
          <Description>Shows what would happen if the cmdlet runs. The cmdlet is not run.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Confirm</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>cf</string>
          </Aliases>
          <Description>Prompts you for confirmation before running the cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>LiteralPath</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.AliasAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
          </Aliases>
          <Description>Specifies a path to the output directory. Unlike the Path parameter, the value of the LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Export-AudioFileCoverArt "Cover"</Cmd>
          <Description>This command exports the cover art for song.wav in the current directory to a new file named Cover.jpg or Cover.png (depending on the image format).</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioFileCoverArt">
      <Name>Get-AudioFileCoverArt</Name>
      <GeneralHelp>
        <Synopsis>Gets the cover art for one or more audio files.</Synopsis>
        <Description>The Get-AudioCoverArt cmdlet simply returns the Metadata.CoverArt property for the audio files.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="AudioFile Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioFileCoverArt [-AudioFile] &lt;AudioFile&gt;</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Get-AudioFileCoverArt</Cmd>
          <Description>This command gets the cover art for an audio file named song.flac in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile *.flac | Get-AudioFileCoverArt</Cmd>
          <Description>This command gets the cover art for all audio files with the .flac extension in the current directory.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Get" noun="AudioFileMetadata">
      <Name>Get-AudioFileMetadata</Name>
      <GeneralHelp>
        <Synopsis>Gets metadata ("tags") associated with one or more audio files.</Synopsis>
        <Description>The Get-AudioFileMetadata cmdlet returns metadata for one or more audio files. You can limit the results by specifying one or more keys.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Key AudioFile Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Get-AudioFileMetadata [[-Key] &lt;String[]&gt;] [-AudioFile] &lt;AudioFile&gt;</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String[]" varLen="true" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Key</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The name(s) of the metadata item(s) to be included. If not specified, the whole metadata dictionary is returned.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Get-AudioFileMetadata -Key Title</Cmd>
          <Description>This command gets the title for an audio file named song.flac in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.flac | Get-AudioFileMetadata -Key Title,TrackNumber</Cmd>
          <Description>This command gets the title and track number for an audio file named song.flac in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>Get-AudioFile *.flac | Get-AudioFileMetadata -Key Title</Cmd>
          <Description>This command gets the title for all audio files with the .flac extension in the current directory.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Save" noun="AudioFileMetadata">
      <Name>Save-AudioFileMetadata</Name>
      <GeneralHelp>
        <Synopsis>Persists changes or additions to one or more audio files' metadata to disk.</Synopsis>
        <Description>The Save-AudioFileMetadata cmdlet persists the current metadata to one or more audio files.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="AudioFile Setting PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable WhatIf Confirm" />
      </ParamSets>
      <Syntax>
        <string>Save-AudioFileMetadata [-AudioFile] &lt;AudioFile&gt; [-Setting &lt;Hashtable&gt;] [-PassThru] [-WhatIf] [-Confirm]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file that has the metadata to be saved.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="Hashtable" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Setting</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Encoder-specific settings to apply. To see the available and default settings for an encoder, use the Get-AudioMetadataEncoderInfo cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>WhatIf</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>wi</string>
          </Aliases>
          <Description>Shows what would happen if the cmdlet runs. The cmdlet is not run.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Confirm</Name>
          <Attributes>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>cf</string>
          </Aliases>
          <Description>Prompts you for confirmation before running the cmdlet.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Set-AudioFileMetadata @{Title = "Test Song"} -PassThru | Save-AudioFileMetadata</Cmd>
          <Description>This command sets the title on song.flac to "Test Song" and then persists the change to disk.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.mp3 | Save-AudioFileMetadata -Setting @{ID3Version = "2.4"; AddSoundCheck = "Album"}</Cmd>
          <Description>This command updates song.mp3 with a new tag suitable for iTunes.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Set" noun="AudioFileCoverArt">
      <Name>Set-AudioFileCoverArt</Name>
      <GeneralHelp>
        <Synopsis>Sets the cover art on one or more audio files.</Synopsis>
        <Description>The Set-AudioFileCoverArt cmdlet sets the cover art on one or more audio files.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="CoverArt AudioFile PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Set-AudioFileCoverArt [-CoverArt] &lt;CoverArt&gt; [-AudioFile] &lt;AudioFile&gt; [-PassThru]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="CoverArt" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>CoverArt</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The cover art.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file upon which the cover art is to be set.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the modified audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Set-AudioFileCoverArt (Get-AudioCoverArt Folder.jpg)</Cmd>
          <Description>This command sets the cover art on song.flac to the image from Folder.jpg in the current directory.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.flac | Set-AudioFileCoverArt (Get-AudioCoverArt Folder.jpg) -PassThru | Save-AudioFileMetadata</Cmd>
          <Description>This command sets the cover art on song.flac to the image from Folder.jpg in the current directory, and then persists the change to disk.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Set" noun="AudioFileMetadata">
      <Name>Set-AudioFileMetadata</Name>
      <GeneralHelp>
        <Synopsis>Sets the metadata on one or more audio files.</Synopsis>
        <Description>The Set-AudioFileMetadata cmdlet sets metadata on one or more audio files using HashTable syntax.</Description>
        <Notes />
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType />
        <ReturnUrl />
        <ReturnTypeDescription />
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="Metadata AudioFile PassThru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Set-AudioFileMetadata [-Metadata] &lt;Hashtable&gt; [-AudioFile] &lt;AudioFile&gt; [-PassThru]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="Hashtable" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>Metadata</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The metadata.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="AudioFile" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="1" globbing="false">
          <Name>AudioFile</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>The audio file upon which the metadata is to be set.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>PassThru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Writes the modified audio file to the console. By default, this cmdlet does not generate any output.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>Get-AudioFile song.flac | Set-AudioFileMetadata @{Title = "Test Song"}</Cmd>
          <Description />
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>Get-AudioFile song.flac | Set-AudioFileMetadata @{Title = "Test Song"} -PassThru | Save-AudioFileMetadata</Cmd>
          <Description>This command sets the title on song.flac to "Test Song" and then persists the change to disk.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
  </Cmdlets>
</ModuleObject>